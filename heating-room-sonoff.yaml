#*******************************************************************************
# Sonoff Basic based 
# Its able to measure current by using a CT Sensor.
# esphome config/compile/upload/run/logs solar_energy_monitor_sonoff.yaml
# Forgani, Forghanain
# https://www.forgani.com/electronics-projects/make-a-solar-sys…h-a-sonoff-basic
# 
# initial 12 Aug. 2023
# ******************************************************************************/
substitutions:
  devicename: 'heating-room-sonoff'

esphome:
  name: $devicename
  on_boot:
    then:
      - lambda: id(buzzer_enabled).state = true;
      - light.turn_off: status_led_blink

esp8266:
  board: esp8285

logger:
  level: debug

ota:
  password: !secret ota_password

api:
  encryption:
    key: !secret encryption

wifi:
  networks:
    - ssid: !secret iot_wifi_ssid
      password: !secret iot_wifi_password
      manual_ip:
       static_ip: 192.168.178.64
       gateway: 192.168.178.1
       subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $devicename
    password: !secret ap_password

dallas:
  - pin: GPIO3    # RX D9
    update_interval: 15s

sensor:
  - platform: dallas
    #address: 0xd20300a279059a28
    address: 0x3e3ce10457cbe128  # red
    name: "$devicename Watter Temperature"
    device_class: "temperature"
    state_class: "measurement"
    unit_of_measurement: "°C"
    icon: "mdi:temperature-celsius"
  - platform: dallas
    address: 0x9d3ce10457d85828  # black
    name: "$devicename Flow Temperature"
    device_class: "temperature"
    state_class: "measurement"
    icon: "mdi:thermometer"
    unit_of_measurement: "°C"
  - platform: dallas
    address: 0xe73ce10457711228  # yellow  
    name: "$devicename Retun Temperature"
    device_class: "temperature"
    state_class: "measurement"
    icon: "mdi:thermometer"
    unit_of_measurement: "°C"
  - platform: wifi_signal
    name: "$devicename WiFi Signal"
    update_interval: 30s
    icon: "mdi:wifi"
  - platform: adc
    pin: VCC
    id: "battery_level"
    name: "$devicename battery level"


binary_sensor:
  # - platform: gpio
    # pin: 
      # number: GPIO14     # D5
      # inverted: True 
    # name: "$devicename watter leak sensor"
    # id: leak_sensor
    # filters:
      # - delayed_on: 100ms
    # on_multi_click:
    # - timing:
        # - ON for at least 3s
      # then:
        # - while:
            # condition:
              # - lambda: return (id(leak_sensor).state && id(buzzer_enabled).state);
            # then:
              # - logger.log: "on click 3s"
              # - script.execute: alarm_script
              # - script.wait: alarm_script
    # - timing:
      # - ON for at least 1s
      # then:
        # if:
          # condition:
            # - lambda: return (id(leak_sensor).state);
          # then:
            # - logger.log: "on click 1s"
            # - light.turn_on: status_led_blink
    # on_release:
      # then:
        # - logger.log: "no alarm"
        # - light.turn_off: status_led_blink
        # - lambda: id(buzzer_enabled).state = true;
        # - script.stop: alarm_script
        # - output.turn_off: buzzer_id
  - platform: gpio
    pin: GPIO0      # D3
    icon: "mdi:alarm-plug"
    id: gpio_switch 
    name: "$devicename basic button"
    on_press:
      - switch.toggle: buzzer_enabled
      
light:
  - platform: monochromatic
    id: status_led_blink
    name: "$devicename alarm led"
    output: red_led
    #internal: true
    effects:
    - strobe:
        name: "blink_slow" # 0.1s on, 2s off
        colors:
          - state: true
            brightness: 100%
            duration: 300ms
          - state: false
            duration: 1s
    on_turn_on:
      - light.turn_on:
          id: status_led_blink
          effect: "blink_slow"

# script:
  # - id: alarm_script
    # then:
      # - output.esp8266_pwm.set_frequency:
          # id: buzzer_id
          # frequency: 900Hz
      # - output.set_level:
          # id: buzzer_id
          # level: 30%
      # - delay: 500ms
      # - output.esp8266_pwm.set_frequency:
          # id: buzzer_id
          # frequency: 500Hz
      # - output.set_level:
          # id: buzzer_id
          # level: 30%
      # - delay: 100ms

output:
  - platform: esp8266_pwm
    pin: GPIO12
    id: buzzer_id
  - platform: esp8266_pwm
    id: red_led
    pin:
      number: GPIO13

# Exposed switches.
switch:
  - platform: template
    name: "$devicename virtual off switch"
    id: buzzer_enabled
    #icon: mdi:volume-high
    icon: mdi:toggle-switch-off-outline
    inverted: false
    optimistic: true
    restore_state: true
   
    