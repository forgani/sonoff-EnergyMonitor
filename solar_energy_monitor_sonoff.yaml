#*******************************************************************************
# Sonoff Basic based 
# Its able to measure current by using a CT Sensor.
# esphome config/compile/upload/run/logs solar_energy_monitor_sonoff.yaml
# Forgani, Forghanain
# https://www.forgani.com/electronics-projects/make-a-solar-sys…h-a-sonoff-basic
# 
# initial 12 Aug. 2023
# ******************************************************************************/substitutions:
substitutions:
  device_name: 'solar_energy_monitor_sonoff'

esphome:
  name: $device_name
  on_boot:
    then:
      - switch.turn_off: relay
      - light.turn_on: red_led
      - light.turn_off: green_led

esp8266:
  board: esp8285


# Enable logging
logger:
  level: debug
  #baud_rate: 0 #need this to free up UART pins

ota:
  password: !secret ota_password

# Enable Home Assistant API
api:
  encryption:
    key: "SG2LAwzh7u8/vBZhdirBWxEy/xtlMsHF3jlon0Kx9vw="

#Sonoff Basic
#GPIO00 - BUTTON LOW = Taste gedrückt
#GPIO12 - RELAY  LED Rot und Relais  LOW = Ein
#GPIO13 - LED1   LED Blau 
#GPIO03 - RX PIN
#GPIO01 - TX PIN
#GPIO14:  EXTRA GPIO


wifi:
  networks:
    - ssid: !secret iot_wifi_ssid
      password: !secret iot_wifi_password
      manual_ip:
        static_ip: !secret solar_energy_monitor_sonoff
        gateway: 192.168.178.1
        subnet: 255.255.255.0
    - ssid: iot_wifi_ext_ssid
      password: !secret iot_wifi_ext_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $devicename
    password: "mgcttI5lb8DN"

dallas:
  - pin: GPIO3    # RX D9
    update_interval: 60s
    
sensor:
  - platform: dallas
    address: 0xf83ce1045783fc28  
    name: "$device_name Temperature"
    device_class: "temperature"
    state_class: "measurement"
    unit_of_measurement: "°C"
    icon: "mdi:temperature-celsius"
  ##############################
  ###############   Read Current
  ##############################
  - platform: ct_clamp
    sensor: ${device_name}_sensor
    name: "${device_name} Measured Current"    # This first sensor gets the Amps, note that is set to internal only.
    id: ${device_name}_measured_current
    #internal: true
    update_interval: 5s    # todo
    accuracy_decimals: 3 
    filters:
      - calibrate_linear:  
          - 0.029 -> 0
          - 0.129 -> 0.6
    on_value_range:
        - above: 0.04
          then:
            - light.turn_on: green_led
            - light.turn_off: red_led
        - below: 0.02
          then:
            - light.turn_off: green_led
            - light.turn_on: red_led
  ##############################
  ###############   Set Current
  ##############################
  - platform: template
    name: "${device_name} Current"  # if the reading is below 0.1A then it reports 0, keeps your 0 at 0
    id: ${device_name}_current
    lambda: |-
      if (id(${device_name}_measured_current).state > 0.03){
        return (id(${device_name}_measured_current).state);
      } else {
        return 0.0;
      }
    device_class: current
    accuracy_decimals: 2
    unit_of_measurement: A
  ##############################
  ###############   Watts
  ##############################
  - platform: template
    name: "${device_name} Watts"  # This sensor converts the Amps to Watts 
    id: ${device_name}_watts
    lambda: |-
      return id(${device_name}_current).state * 230;
    accuracy_decimals: 2
    device_class: power
    unit_of_measurement: W
  - platform: adc
    pin: A0      
    id: ${device_name}_sensor
    accuracy_decimals: 3
  ##############################
  ################  Uptime sensor.
  ##############################
  - platform: uptime
    name: ${device_name} Uptime
    id: "${device_name}_uptime"

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${device_name} WiFi Signal
    id: "${device_name}_wifi_signal"
    update_interval: 15s

binary_sensor:
  - platform: status
    name: "${device_name} Status" 

output:
  - platform: esp8266_pwm
    id: ${device_name}_green_led
    inverted: true
    pin: GPIO13
  - platform: esp8266_pwm
    id: ${device_name}_red_led
    inverted: false
    pin: GPIO3
      
light:
  - platform: binary
    id: green_led
    name: Green LED
    output: ${device_name}_green_led
  - platform: binary
    id: red_led    
    name: Red LED    
    output: ${device_name}_red_led
   
    
text_sensor:
  - platform: version
    name: "${device_name} Ver 1 ESPHome" 

switch:
  - platform: gpio
    id: relay  
    name: Relay
    pin: GPIO12
    restore_mode: ALWAYS_OFF